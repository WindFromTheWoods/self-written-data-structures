/*
 * Лист - Это структура данных, которая содержит в себе элемент (узел) и указатель на последующий элемент
 * Последний элемент листа указывает на nullptr (Нулевой указатель)
 *
 * Что бы реализовать односвязный список нам необходимо:
 * 1) Выделить под него память.
 * 2) Задать ему значение
 * 3) Сделать так, чтобы он ссылался на предыдущий элемент (или на NULL, если его не было)
 * 4) Перекинуть указатель head на новый узел.
 */

#ifndef LIST_LIST_H
#define LIST_LIST_H

#include <iostream>

// Узел между обьектами листа
typedef struct Node
{
    int value;
    struct Node *next;
} Node;

/*
 * Обьявляем функцию push, она должна:
 * 1) Выделить память для элемента
 * 2) Добавлять значение в начало листа
 */
void push(Node **head, int data);

/*
 * Обьявляем функцию pop, она должна:
 * 1) Удалить указатель на первый элемент
 * 2) Вернуть значение первого элемента
 */
int pop(Node **head);

/*
 * Обьявляем функцию pushBack, она должна:
 * 1) Принять на себя указатель последнего элемента
 * 2) Вставить элемент в конец листа
 */
void pushBack(Node **head, int value);

/*
 * Обьявляем функцию popBack, она должна:
 * 1) Удалить указатель на последний элемент и передать его предпоследнему
 * 2) Вернуть значение последнего элемента листа
 */
void popBack(Node **head);
/*
 * Обьявляем функцию insert, она должна:
 * 1) Вставить элемент в выбранное место листа
 */

void insert(Node **head, unsigned n, int val);

/*
 * Обьявляем функцию deleteNth, она должна:
 * 1) Удалить указазанный (N) элемент листа
 */
int deleteNth(Node **head, int n);

/*
 * Обьявляем функцию deleteList, она должна:
 * 1) Удалить лист
 */
void deleteList(Node **head);

/*
 * Обьявляем функцию printLinkedList, она должна:
 * 1) Вывести элементы листа
 */
void printLinkedList(const Node *head);

/*
 * Обьявляем функцию fromArray, она должна:
 * 1) Создать лист из элементов массива
 */
void fromArray(Node **head, int *arr, size_t size);

#endif //LIST_LIST_H
